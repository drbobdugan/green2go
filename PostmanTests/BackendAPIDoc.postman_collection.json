{
	"info": {
		"_postman_id": "1dd00882-bfcd-44df-9b74-173bbf39c381",
		"name": "BackendAPIDoc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Tests",
			"item": [
				{
					"name": "Run this login first to update auth_tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login Successful Request\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									"var jsonData = JSON.parse(responseBody).data;",
									"",
									"pm.environment.set(\"authTokenLoginTest0\", jsonData[\"auth_token\"]);",
									"pm.environment.set(\"refreshTokenLoginTest0\", jsonData[\"refresh_token\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Delete Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/deleteUser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deleteUser"
							]
						}
					},
					"response": [
						{
							"name": "Delete user account",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deleteUser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deleteUser"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Wed, 24 Feb 2021 23:49:30 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"\"\n}"
						}
					]
				},
				{
					"name": "New user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200-202\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
									"});",
									"pm.test(\"Successful Post Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\",\n    \"firstName\" : \"Test\",\n    \"lastName\" : \"User\",\n    \"middleName\" : \"\",\n    \"phoneNum\" : \"1234567890\",\n    \"role\" : \"RegularUser\",\n    \"classYear\" : \"2021\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/addUser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"addUser"
							]
						}
					},
					"response": [
						{
							"name": "Duplicate Entry",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\",\n    \"firstName\" : \"Test\",\n    \"lastName\" : \"User\",\n    \"middleName\" : \"\",\n    \"phoneNum\" : \"1234567890\",\n    \"role\" : \"RegularUser\",\n    \"classYear\" : \"2021\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addUser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addUser"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 16:01:27 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Duplicate Entry\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0001234@students.stonehill.edu\",\n    \"password\" : \"password\",\n    \"firstName\" : \"Test\",\n    \"lastName\" : \"User\",\n    \"middleName\" : \"\",\n    \"phoneNum\" : \"1234567890\",\n    \"role\" : \"reus\",\n    \"classYear\" : \"2021\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addUser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addUser"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Fri, 26 Feb 2021 16:46:19 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"\"\n}"
						},
						{
							"name": "Invalid Email",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.tufts.edu\",\n    \"password\" : \"password\",\n    \"firstName\" : \"Test\",\n    \"lastName\" : \"User\",\n    \"middleName\" : \"J\",\n    \"phoneNum\" : \"1234567890\",\n    \"role\" : \"RegularUser\",\n    \"classYear\" : \"2021\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addUser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addUser"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "60"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 16:03:44 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Please enter a valid email.\"\n}"
						}
					]
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Successful Get Request\", function () {",
									"    console.log(pm.response)",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									"pm.test(\"Email matches\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"test0@students.stonehill.edu\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody).data;",
									"console.log(jsonData);",
									"console.log(jsonData[\"authCode\"]);",
									"pm.environment.set(\"authCodeLoginTest0\", jsonData[\"authCode\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/getUser?email=test0@students.stonehill.edu&auth_token={{authTokenLoginTest0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getUser"
							],
							"query": [
								{
									"key": "email",
									"value": "test0@students.stonehill.edu"
								},
								{
									"key": "auth_token",
									"value": "{{authTokenLoginTest0}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid Token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getUser?email=test0@students.stonehill.edu&auth_token=qwert",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getUser"
									],
									"query": [
										{
											"key": "email",
											"value": "test0@students.stonehill.edu"
										},
										{
											"key": "auth_token",
											"value": "qwert"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:30:58 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Invalid token\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getUser?email=test0@students.stonehill.edu&auth_token=IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getUser"
									],
									"query": [
										{
											"key": "email",
											"value": "test0@students.stonehill.edu"
										},
										{
											"key": "auth_token",
											"value": "IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "313"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Wed, 24 Feb 2021 23:53:37 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"email\": \"test0@students.stonehill.edu\",\n        \"password\": \"password\",\n        \"firstName\": \"Test\",\n        \"lastName\": \"User\",\n        \"middleName\": \"\",\n        \"phoneNum\": \"1234567890\",\n        \"role\": \"reus\",\n        \"classYear\": \"2021\",\n        \"authCode\": \"zdmdLvqvBXqF\",\n        \"authTime\": \"2021-02-24 23:49:33\",\n        \"lastLogIn\": \"2021-02-24 23:49:33\"\n    }\n}"
						},
						{
							"name": "User Does Not Exist",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getUser?email=test100@students.stonehill.edu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getUser"
									],
									"query": [
										{
											"key": "email",
											"value": "test100@students.stonehill.edu"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "57"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Fri, 26 Feb 2021 16:44:34 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Entry could not be found\"\n}"
						}
					]
				},
				{
					"name": "Validate Code That was Emailed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Post Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody).data;",
									"console.log(jsonData);",
									"pm.environment.set(\"authTokenLoginTest0\", jsonData[\"auth_token\"]);",
									"pm.environment.set(\"refreshTokenLoginTest0\", jsonData[\"refresh_token\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"code\" : \"{{authCodeLoginTest0}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/validateCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"validateCode"
							]
						}
					},
					"response": [
						{
							"name": "Expired Token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"code\" : \"zdmdLvqvBXqF\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/validateCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"validateCode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Thu, 25 Feb 2021 00:07:28 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Expired token\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"code\" : \"wg9HCCkf5Ay2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/validateCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"validateCode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "233"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:37:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\": \"test0@students.stonehill.edu\",\n        \"auth_token\": \"jQDgCmqI0o5SyM73sVKXEwaaR5Wyu6vybxkLKXPZmKtVN\",\n        \"refresh_token\": \"0awWHpzjw5UUY7ztrj0cATlf2FhGKmTlwKUZC8p7ei5VR\",\n        \"expires_at\": \"2021-03-03 00:37:53\"\n    }\n}"
						}
					]
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login Successful Request\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									"var jsonData = JSON.parse(responseBody).data;",
									"console.log(jsonData);",
									"pm.environment.set(\"authTokenLoginTest0\", jsonData[\"auth_token\"]);",
									"pm.environment.set(\"refreshTokenLoginTest0\", jsonData[\"refresh_token\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Incorrect Password",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"passwordwrong\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 16:16:19 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": false, \"message\": \"Incorrect password.\"}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "233"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 16:07:27 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\": \"test0@students.stonehill.edu\",\n        \"auth_token\": \"GertCXbYWFJwVMdISuumIQ3THdlC25XjURVCleZjpm2XI\",\n        \"refresh_token\": \"gO2ATkprtAU4Wez37k9MDFydPAk71TzsCjQTtfEMvLWGK\",\n        \"expires_at\": \"2021-03-09 17:07:27\"\n    }\n}"
						},
						{
							"name": "User Login Attempt W/O Completing Registration",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "72"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 16:07:56 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Email not found, please try signing up.\"\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Post Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody).data;",
									"console.log(jsonData);",
									"pm.environment.set(\"authTokenLoginTest0\", jsonData[\"auth_token\"]);",
									"pm.environment.set(\"refreshTokenLoginTest0\", jsonData[\"refresh_token\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"test0@students.stonehill.edu\",\r\n    \"refresh_token\" : \"{{refreshTokenLoginTest0}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": [
						{
							"name": "Refresh Token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"test0@students.stonehill.edu\",\r\n    \"refresh_token\" : \"I2X5HJUvmzN9ZSUxn79Hz80hFdjJ5M0f5V6FmGNaNJlJn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "193"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Mon, 01 Mar 2021 18:22:14 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"auth_token\": \"uBBL28a92BPTvNPNVGdUGUp76dDV5By909dqIbSHjmFP1\",\n        \"refresh_token\": \"I2X5HJUvmzN9ZSUxn79Hz80hFdjJ5M0f5V6FmGNaNJlJn\",\n        \"expires_at\": \"2021-03-01 19:22:14\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update user infomation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Successful Patch Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"password\",\n    \"firstName\" : \"Testname\",\n    \"lastName\" : \"User\",\n    \"middleName\" : \"2\",\n    \"phoneNum\" : \"1234567890\",\n    \"role\" : \"RegularUser\",\n    \"classYear\" : 2021,\n    \"authCode\" : \"{{authCodeLoginTest0}}\",\n    \"authTime\" : \"\",\n    \"lastLogIn\": \"\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/updateUser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"updateUser"
							]
						}
					},
					"response": [
						{
							"name": "Update user infomation",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"password\" : \"updatedpassword\",\n    \"firstName\" : \"Test\",\n    \"lastName\" : \"User\",\n    \"middleName\" : \"2\",\n    \"phoneNum\" : \"1234567890\",\n    \"role\" : \"reus\",\n    \"classYear\" : 2021,\n    \"authCode\" : \"43523\",\n    \"authTime\" : \"\",\n    \"lastLogIn\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/updateUser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"updateUser"
									]
								}
							},
							"status": "INTERNAL SERVER ERROR",
							"code": 500,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "290"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Wed, 24 Feb 2021 23:49:39 GMT"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\n<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>"
						}
					]
				},
				{
					"name": "Resend Auth Code",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/resendAuthCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"resendAuthCode"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/resendAuthCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resendAuthCode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "29"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 16:17:20 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": \"\"\n}"
						}
					]
				}
			],
			"description": "<p>The User Tests folder will be used to fully test out the user routes. Since we needed to add an auth_token to most of the fields. We have set up this folder to ensure successful results and there should be no need to worry about expired tokens. \nSo test0@students.stonehill.edu will be the account that is going to be used to preform each request.</p> \n<p>To ensure everything goes very well while testing in Postman and also once CI starts test0@students.stonehill.edu should <strong>always</strong> be inside of the database. This allows us to update the auth_token(login) so that each request in Postman will be able to update the environment variables.</p>\n<p>There are three environment variables that will get update after certain requests which include: <strong>authCodeLoginTest0, authTokenLoginTest0, refreshTokenLoginTest0</strong>  <br>\nSince there is a dependency on some methods being executed before others can be successfully run I ask if you are testing something that only involves one specific request that you copy the request and test there to have minimal errors when we start running the collection after each push of new code.</p>\n\n"
		},
		{
			"name": "Container Tests",
			"item": [
				{
					"name": "Delete container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Delete Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrcode\" : \"001\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\",\n    \"email\" : \"test0@students.stonehill.edu\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/deleteContainer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deleteContainer"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"qrcode\" : \"001\",\n    \"auth_token\" : \"IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2\",\n    \"email\" : \"test0@students.stonehill.edu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deleteContainer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deleteContainer"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:55:56 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": true, \"message\": \"\"}"
						}
					]
				},
				{
					"name": "New container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Post Response \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrcode\" : \"001\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/addContainer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"addContainer"
							]
						}
					},
					"response": [
						{
							"name": "Duplicate Entry",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"qrcode\" : \"001\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addContainer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addContainer"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:52:07 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": false, \"message\": \"Duplicate Entry\"}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"qrcode\" : \"001\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addContainer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addContainer"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:51:48 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": true, \"message\": \"\"}"
						}
					]
				},
				{
					"name": "Get Container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Get Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									"",
									"pm.test(\"QR Code Matches\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"001\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/getContainer?qrcode=001&auth_token={{authTokenLoginTest0}}&email=test0@students.stonehill.edu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getContainer"
							],
							"query": [
								{
									"key": "qrcode",
									"value": "001"
								},
								{
									"key": "auth_token",
									"value": "{{authTokenLoginTest0}}"
								},
								{
									"key": "email",
									"value": "test0@students.stonehill.edu"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid Token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getContainer?qrcode=001&auth_token=12&email=test0@students.stonehill.edu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getContainer"
									],
									"query": [
										{
											"key": "qrcode",
											"value": "001"
										},
										{
											"key": "auth_token",
											"value": "12"
										},
										{
											"key": "email",
											"value": "test0@students.stonehill.edu"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:50:22 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": false, \"message\": \"Invalid token\"}"
						},
						{
							"name": "No matching user with token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getContainer?qrcode=001&auth_token=IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2&email=test0000@students.stonehill.edu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getContainer"
									],
									"query": [
										{
											"key": "qrcode",
											"value": "001"
										},
										{
											"key": "auth_token",
											"value": "IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2"
										},
										{
											"key": "email",
											"value": "test0000@students.stonehill.edu"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "79"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:49:48 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": false, \"message\": \"No matching user with that authorization token\"}"
						},
						{
							"name": "Entry Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getContainer?qrcode=0010&auth_token=IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2&email=test0@students.stonehill.edu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getContainer"
									],
									"query": [
										{
											"key": "qrcode",
											"value": "0010"
										},
										{
											"key": "auth_token",
											"value": "IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2"
										},
										{
											"key": "email",
											"value": "test0@students.stonehill.edu"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "57"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:49:06 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": false, \"message\": \"Entry could not be found\"}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getContainer?qrcode=001&auth_token=IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2&email=test0@students.stonehill.edu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getContainer"
									],
									"query": [
										{
											"key": "qrcode",
											"value": "001"
										},
										{
											"key": "auth_token",
											"value": "IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2"
										},
										{
											"key": "email",
											"value": "test0@students.stonehill.edu"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "44"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:48:50 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": true, \"data\": {\"qrcode\": \"001\"}}"
						}
					]
				}
			]
		},
		{
			"name": "HasContainer Tests",
			"item": [
				{
					"name": "Checkout Container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Post Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test0@students.stonehill.edu\",\n    \"qrcode\" : \"001\",\n    \"status\" : \"Checked out\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkoutContainer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkoutContainer"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"test0@students.stonehill.edu\",\n    \"qrcode\" : \"001\",\n    \"status\" : \"Checked out\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addRelationship",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addRelationship"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Mar 2021 00:00:11 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": true, \"message\": \"\"}"
						},
						{
							"name": "Duplicate Entry",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"test0@students.stonehill.edu\",\n    \"qrcode\" : \"001\",\n    \"status\" : \"Checked out\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addRelationship",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addRelationship"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Mar 2021 23:59:05 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": false, \"message\": \"Duplicate Entry\"}"
						}
					]
				},
				{
					"name": "Get Containers For User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Get Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/getContainersForUser?email=test0@students.stonehill.edu&auth_token={{authTokenLoginTest0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getContainersForUser"
							],
							"query": [
								{
									"key": "email",
									"value": "test0@students.stonehill.edu"
								},
								{
									"key": "auth_token",
									"value": "{{authTokenLoginTest0}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "detail about relationship",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/getRelationship?email=test@students.stonehill.edu&qrcode=000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getRelationship"
									],
									"query": [
										{
											"key": "email",
											"value": "test@students.stonehill.edu"
										},
										{
											"key": "qrcode",
											"value": "000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Thu, 25 Feb 2021 00:14:06 GMT"
								}
							],
							"cookie": [],
							"body": "{\"success\": true, \"message\": \"\"}"
						}
					]
				},
				{
					"name": "Checkin Container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful Post Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"qrcode\" : \"001\",\n    \"status\" : \"Pending Return\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkinContainer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkinContainer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Location Tests",
			"item": [
				{
					"name": "Select Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"qrcode\" : \"0001\",\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/selectLocation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"selectLocation"
							]
						}
					},
					"response": [
						{
							"name": "Select Location",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"qrcode\" : \"001\",\n    \"auth_token\" : \"IYsct8Fdykz8ZgeL247uocFuooHYBMrEgqANglnP0zUL2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selectLocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selectLocation"
									]
								}
							},
							"status": "NOT FOUND",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "232"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Mar 2021 01:01:35 GMT"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>"
						},
						{
							"name": "Select Location",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"qrcode\" : \"0001\",\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"auth_token\" : \"{{authTokenLoginTest0}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selectLocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selectLocation"
									]
								}
							},
							"status": "INTERNAL SERVER ERROR",
							"code": 500,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 01:45:13 GMT"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n    <head>\n        <title>TypeError: 'NoneType' object is not subscriptable // Werkzeug Debugger</title>\n        <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n        <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n        <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n        <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n        <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n        <script type=\"text/javascript\">\n      var TRACEBACK = 140081106684784,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"lXcvPm4uUpDRrekCVTLs\";\n    </script>\n    </head>\n    <body style=\"background-color: #fff\">\n        <div class=\"debugger\">\n            <h1>TypeError</h1>\n            <div class=\"detail\">\n                <p class=\"errormsg\">TypeError: 'NoneType' object is not subscriptable</p>\n            </div>\n            <h2 class=\"traceback\">Traceback \n                <em>(most recent call last)</em>\n            </h2>\n            <div class=\"traceback\">\n                <ul>\n                    <li>\n                        <div class=\"frame\" id=\"frame-140081106684056\">\n                            <h4>File \n                                <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                <em class=\"line\">2464</em>,\n      in\n                                <code class=\"function\">__call__</code>\n                            </h4>\n                            <div class=\"source library\">\n                                <pre class=\"line before\">\n                                    <span class=\"ws\"></span>\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">    </span>def __call__(self, environ, start_response):\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;\n                                </pre>\n                                <pre class=\"line current\">\n                                    <span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n                                </pre>\n                                <pre class=\"line after\">\n                                    <span class=\"ws\"></span>\n                                </pre>\n                                <pre class=\"line after\">\n                                    <span class=\"ws\">    </span>def __repr__(self):\n                                </pre>\n                                <pre class=\"line after\">\n                                    <span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)\n                                </pre>\n                            </div>\n                        </div>\n                        <li>\n                            <div class=\"frame\" id=\"frame-140081106684000\">\n                                <h4>File \n                                    <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                    <em class=\"line\">2450</em>,\n      in\n                                    <code class=\"function\">wsgi_app</code>\n                                </h4>\n                                <div class=\"source library\">\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">            </span>try:\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">                </span>ctx.push()\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">                </span>response = self.full_dispatch_request()\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">            </span>except Exception as e:\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">                </span>error = e\n                                    </pre>\n                                    <pre class=\"line current\">\n                                        <span class=\"ws\">                </span>response = self.handle_exception(e)\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">            </span>except:  # noqa: B001\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">                </span>error = sys.exc_info()[1]\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">                </span>raise\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">            </span>return response(environ, start_response)\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">        </span>finally:\n                                    </pre>\n                                </div>\n                            </div>\n                            <li>\n                                <div class=\"frame\" id=\"frame-140081106685232\">\n                                    <h4>File \n                                        <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                        <em class=\"line\">1867</em>,\n      in\n                                        <code class=\"function\">handle_exception</code>\n                                    </h4>\n                                    <div class=\"source library\">\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># raise it with the whole traceback in case we can do that\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># (the function was actually called from the except part)\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># otherwise, we just raise the error again\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span>if exc_value is e:\n                                        </pre>\n                                        <pre class=\"line current\">\n                                            <span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">            </span>else:\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">                </span>raise e\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\"></span>\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">        </span>server_error = InternalServerError()\n                                        </pre>\n                                    </div>\n                                </div>\n                                <li>\n                                    <div class=\"frame\" id=\"frame-140081106684952\">\n                                        <h4>File \n                                            <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\"</cite>,\n      line\n                                            <em class=\"line\">39</em>,\n      in\n                                            <code class=\"function\">reraise</code>\n                                        </h4>\n                                        <div class=\"source library\">\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">    </span>import collections.abc as collections_abc\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\"></span>\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">    </span>def reraise(tp, value, tb=None):\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">        </span>if value.__traceback__ is not tb:\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">            </span>raise value.with_traceback(tb)\n                                            </pre>\n                                            <pre class=\"line current\">\n                                                <span class=\"ws\">        </span>raise value\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\"></span>\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\">    </span>implements_to_string = _identity\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\"></span>\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\"></span>else:\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\">    </span>iterkeys = lambda d: d.iterkeys()\n                                            </pre>\n                                        </div>\n                                    </div>\n                                    <li>\n                                        <div class=\"frame\" id=\"frame-140081106685064\">\n                                            <h4>File \n                                                <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                <em class=\"line\">2447</em>,\n      in\n                                                <code class=\"function\">wsgi_app</code>\n                                            </h4>\n                                            <div class=\"source library\">\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">        </span>ctx = self.request_context(environ)\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">        </span>error = None\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">        </span>try:\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">            </span>try:\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">                </span>ctx.push()\n                                                </pre>\n                                                <pre class=\"line current\">\n                                                    <span class=\"ws\">                </span>response = self.full_dispatch_request()\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">            </span>except Exception as e:\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">                </span>error = e\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">                </span>response = self.handle_exception(e)\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">            </span>except:  # noqa: B001\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">                </span>error = sys.exc_info()[1]\n                                                </pre>\n                                            </div>\n                                        </div>\n                                        <li>\n                                            <div class=\"frame\" id=\"frame-140081106685176\">\n                                                <h4>File \n                                                    <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                    <em class=\"line\">1952</em>,\n      in\n                                                    <code class=\"function\">full_dispatch_request</code>\n                                                </h4>\n                                                <div class=\"source library\">\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">            </span>request_started.send(self)\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">            </span>rv = self.preprocess_request()\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">            </span>if rv is None:\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">                </span>rv = self.dispatch_request()\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">        </span>except Exception as e:\n                                                    </pre>\n                                                    <pre class=\"line current\">\n                                                        <span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">        </span>return self.finalize_request(rv)\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\"></span>\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">        </span>the request by converting it into a response and invoking the\n                                                    </pre>\n                                                </div>\n                                            </div>\n                                            <li>\n                                                <div class=\"frame\" id=\"frame-140081106685344\">\n                                                    <h4>File \n                                                        <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                        <em class=\"line\">1821</em>,\n      in\n                                                        <code class=\"function\">handle_user_exception</code>\n                                                    </h4>\n                                                    <div class=\"source library\">\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\">            </span>return self.handle_http_exception(e)\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\"></span>\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\">        </span>handler = self._find_error_handler(e)\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\"></span>\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\">        </span>if handler is None:\n                                                        </pre>\n                                                        <pre class=\"line current\">\n                                                            <span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">        </span>return handler(e)\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\"></span>\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">    </span>def handle_exception(self, e):\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">        </span>associated with it, or that was raised from an error handler.\n                                                        </pre>\n                                                    </div>\n                                                </div>\n                                                <li>\n                                                    <div class=\"frame\" id=\"frame-140081106685288\">\n                                                        <h4>File \n                                                            <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\"</cite>,\n      line\n                                                            <em class=\"line\">39</em>,\n      in\n                                                            <code class=\"function\">reraise</code>\n                                                        </h4>\n                                                        <div class=\"source library\">\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">    </span>import collections.abc as collections_abc\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\"></span>\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">    </span>def reraise(tp, value, tb=None):\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">        </span>if value.__traceback__ is not tb:\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">            </span>raise value.with_traceback(tb)\n                                                            </pre>\n                                                            <pre class=\"line current\">\n                                                                <span class=\"ws\">        </span>raise value\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\"></span>\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\">    </span>implements_to_string = _identity\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\"></span>\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\"></span>else:\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\">    </span>iterkeys = lambda d: d.iterkeys()\n                                                            </pre>\n                                                        </div>\n                                                    </div>\n                                                    <li>\n                                                        <div class=\"frame\" id=\"frame-140081106682936\">\n                                                            <h4>File \n                                                                <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                                <em class=\"line\">1950</em>,\n      in\n                                                                <code class=\"function\">full_dispatch_request</code>\n                                                            </h4>\n                                                            <div class=\"source library\">\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">        </span>try:\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">            </span>request_started.send(self)\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">            </span>rv = self.preprocess_request()\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">            </span>if rv is None:\n                                                                </pre>\n                                                                <pre class=\"line current\">\n                                                                    <span class=\"ws\">                </span>rv = self.dispatch_request()\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">        </span>except Exception as e:\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">        </span>return self.finalize_request(rv)\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\"></span>\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):\n                                                                </pre>\n                                                            </div>\n                                                        </div>\n                                                        <li>\n                                                            <div class=\"frame\" id=\"frame-140081106685456\">\n                                                                <h4>File \n                                                                    <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                                    <em class=\"line\">1936</em>,\n      in\n                                                                    <code class=\"function\">dispatch_request</code>\n                                                                </h4>\n                                                                <div class=\"source library\">\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">        </span>):\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">            </span>return self.make_default_options_response()\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint\n                                                                    </pre>\n                                                                    <pre class=\"line current\">\n                                                                        <span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\"></span>\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">    </span>def full_dispatch_request(self):\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">        </span>error handling.\n                                                                    </pre>\n                                                                </div>\n                                                            </div>\n                                                            <li>\n                                                                <div class=\"frame\" id=\"frame-140081106685512\">\n                                                                    <h4>File \n                                                                        <cite class=\"filename\">\"/root/green2go/Backend/runBackend.py\"</cite>,\n      line\n                                                                        <em class=\"line\">468</em>,\n      in\n                                                                        <code class=\"function\">selectLoction</code>\n                                                                    </h4>\n                                                                    <div class=\"source \">\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>authCheck = handleAuth(locationDic)\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>if authCheck[0] is False:\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">        </span>return json.dumps({&quot;success&quot; : False, &quot;message&quot; : authCheck[1]})\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>locationDic.pop('auth_token', None)\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>res = locationDao.selectLocation(locationDic)  #need to get the method for database team\n                                                                        </pre>\n                                                                        <pre class=\"line current\">\n                                                                            <span class=\"ws\">    </span>if res[0] is True:\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\">        </span>return json.dumps({&quot;success&quot; : res[0], &quot;message&quot; : &quot;&quot;})\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\">    </span>else:\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\">        </span>return json.dumps({&quot;success&quot; : res[0], &quot;message&quot; : res[1]})\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\"></span>\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\"></span>if __name__ == '__main__':\n                                                                        </pre>\n                                                                    </div>\n                                                                </div>\n                                                            </ul>\n                                                            <blockquote>TypeError: 'NoneType' object is not subscriptable</blockquote>\n                                                        </div>\n                                                        <div class=\"plain\">\n                                                            <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n                                                                <p>\n                                                                    <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  \n                                                                    <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a \n                                                                        <a href=\"https://gist.github.com/\">gist</a>:\n                                                                        <input type=\"submit\" value=\"create paste\">\n                                                                    </span>\n                                                                </p>\n                                                                <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/_compat.py&quot;, line 39, in reraise\n    raise value\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/_compat.py&quot;, line 39, in reraise\n    raise value\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;/root/green2go/Backend/runBackend.py&quot;, line 468, in selectLoction\n    if res[0] is True:\nTypeError: 'NoneType' object is not subscriptable</textarea>\n                                                            </form>\n                                                        </div>\n                                                        <div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  \n                                                            <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n                                                        </div>\n                                                        <div class=\"footer\">\n        Brought to you by \n                                                            <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"pin-prompt\">\n                                                        <div class=\"inner\">\n                                                            <h3>Console Locked</h3>\n                                                            <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        \n                                                                <form>\n                                                                    <p>PIN:\n            \n                                                                        <input type=text name=pin size=14>\n                                                                        <input type=submit name=btn value=\"Confirm Pin\">\n        \n                                                                    </form>\n                                                                </div>\n                                                            </div>\n                                                        </body>\n                                                    </html>\n                                                    <!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/root/green2go/Backend/runBackend.py\", line 468, in selectLoction\n    if res[0] is True:\nTypeError: 'NoneType' object is not subscriptable\n\n-->\n"
						},
						{
							"name": "Select Location",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"qrcode\" : \"0001\",\n    \"email\" : \"test0@students.stonehill.edu\",\n    \"auth_token\" : \"hChr0eKMAaEXFucyQzFEbvX72PYkE6A1qsbqAbEvvfPbT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/selectLocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selectLocation"
									]
								}
							},
							"status": "INTERNAL SERVER ERROR",
							"code": 500,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.6.9"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Mar 2021 02:50:43 GMT"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n    <head>\n        <title>TypeError: 'NoneType' object is not subscriptable // Werkzeug Debugger</title>\n        <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n        <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n        <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n        <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n        <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n        <script type=\"text/javascript\">\n      var TRACEBACK = 140100572794776,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"v41VlRfOeEi7ZL31rWsH\";\n    </script>\n    </head>\n    <body style=\"background-color: #fff\">\n        <div class=\"debugger\">\n            <h1>TypeError</h1>\n            <div class=\"detail\">\n                <p class=\"errormsg\">TypeError: 'NoneType' object is not subscriptable</p>\n            </div>\n            <h2 class=\"traceback\">Traceback \n                <em>(most recent call last)</em>\n            </h2>\n            <div class=\"traceback\">\n                <ul>\n                    <li>\n                        <div class=\"frame\" id=\"frame-140100572181056\">\n                            <h4>File \n                                <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                <em class=\"line\">2464</em>,\n      in\n                                <code class=\"function\">__call__</code>\n                            </h4>\n                            <div class=\"source library\">\n                                <pre class=\"line before\">\n                                    <span class=\"ws\"></span>\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">    </span>def __call__(self, environ, start_response):\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be\n                                </pre>\n                                <pre class=\"line before\">\n                                    <span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;\n                                </pre>\n                                <pre class=\"line current\">\n                                    <span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n                                </pre>\n                                <pre class=\"line after\">\n                                    <span class=\"ws\"></span>\n                                </pre>\n                                <pre class=\"line after\">\n                                    <span class=\"ws\">    </span>def __repr__(self):\n                                </pre>\n                                <pre class=\"line after\">\n                                    <span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)\n                                </pre>\n                            </div>\n                        </div>\n                        <li>\n                            <div class=\"frame\" id=\"frame-140100572180944\">\n                                <h4>File \n                                    <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                    <em class=\"line\">2450</em>,\n      in\n                                    <code class=\"function\">wsgi_app</code>\n                                </h4>\n                                <div class=\"source library\">\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">            </span>try:\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">                </span>ctx.push()\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">                </span>response = self.full_dispatch_request()\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">            </span>except Exception as e:\n                                    </pre>\n                                    <pre class=\"line before\">\n                                        <span class=\"ws\">                </span>error = e\n                                    </pre>\n                                    <pre class=\"line current\">\n                                        <span class=\"ws\">                </span>response = self.handle_exception(e)\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">            </span>except:  # noqa: B001\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">                </span>error = sys.exc_info()[1]\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">                </span>raise\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">            </span>return response(environ, start_response)\n                                    </pre>\n                                    <pre class=\"line after\">\n                                        <span class=\"ws\">        </span>finally:\n                                    </pre>\n                                </div>\n                            </div>\n                            <li>\n                                <div class=\"frame\" id=\"frame-140100572181224\">\n                                    <h4>File \n                                        <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                        <em class=\"line\">1867</em>,\n      in\n                                        <code class=\"function\">handle_exception</code>\n                                    </h4>\n                                    <div class=\"source library\">\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># raise it with the whole traceback in case we can do that\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># (the function was actually called from the except part)\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span># otherwise, we just raise the error again\n                                        </pre>\n                                        <pre class=\"line before\">\n                                            <span class=\"ws\">            </span>if exc_value is e:\n                                        </pre>\n                                        <pre class=\"line current\">\n                                            <span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">            </span>else:\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">                </span>raise e\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\"></span>\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))\n                                        </pre>\n                                        <pre class=\"line after\">\n                                            <span class=\"ws\">        </span>server_error = InternalServerError()\n                                        </pre>\n                                    </div>\n                                </div>\n                                <li>\n                                    <div class=\"frame\" id=\"frame-140100572180832\">\n                                        <h4>File \n                                            <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\"</cite>,\n      line\n                                            <em class=\"line\">39</em>,\n      in\n                                            <code class=\"function\">reraise</code>\n                                        </h4>\n                                        <div class=\"source library\">\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">    </span>import collections.abc as collections_abc\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\"></span>\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">    </span>def reraise(tp, value, tb=None):\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">        </span>if value.__traceback__ is not tb:\n                                            </pre>\n                                            <pre class=\"line before\">\n                                                <span class=\"ws\">            </span>raise value.with_traceback(tb)\n                                            </pre>\n                                            <pre class=\"line current\">\n                                                <span class=\"ws\">        </span>raise value\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\"></span>\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\">    </span>implements_to_string = _identity\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\"></span>\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\"></span>else:\n                                            </pre>\n                                            <pre class=\"line after\">\n                                                <span class=\"ws\">    </span>iterkeys = lambda d: d.iterkeys()\n                                            </pre>\n                                        </div>\n                                    </div>\n                                    <li>\n                                        <div class=\"frame\" id=\"frame-140100572180888\">\n                                            <h4>File \n                                                <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                <em class=\"line\">2447</em>,\n      in\n                                                <code class=\"function\">wsgi_app</code>\n                                            </h4>\n                                            <div class=\"source library\">\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">        </span>ctx = self.request_context(environ)\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">        </span>error = None\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">        </span>try:\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">            </span>try:\n                                                </pre>\n                                                <pre class=\"line before\">\n                                                    <span class=\"ws\">                </span>ctx.push()\n                                                </pre>\n                                                <pre class=\"line current\">\n                                                    <span class=\"ws\">                </span>response = self.full_dispatch_request()\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">            </span>except Exception as e:\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">                </span>error = e\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">                </span>response = self.handle_exception(e)\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">            </span>except:  # noqa: B001\n                                                </pre>\n                                                <pre class=\"line after\">\n                                                    <span class=\"ws\">                </span>error = sys.exc_info()[1]\n                                                </pre>\n                                            </div>\n                                        </div>\n                                        <li>\n                                            <div class=\"frame\" id=\"frame-140100572181168\">\n                                                <h4>File \n                                                    <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                    <em class=\"line\">1952</em>,\n      in\n                                                    <code class=\"function\">full_dispatch_request</code>\n                                                </h4>\n                                                <div class=\"source library\">\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">            </span>request_started.send(self)\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">            </span>rv = self.preprocess_request()\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">            </span>if rv is None:\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">                </span>rv = self.dispatch_request()\n                                                    </pre>\n                                                    <pre class=\"line before\">\n                                                        <span class=\"ws\">        </span>except Exception as e:\n                                                    </pre>\n                                                    <pre class=\"line current\">\n                                                        <span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">        </span>return self.finalize_request(rv)\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\"></span>\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes\n                                                    </pre>\n                                                    <pre class=\"line after\">\n                                                        <span class=\"ws\">        </span>the request by converting it into a response and invoking the\n                                                    </pre>\n                                                </div>\n                                            </div>\n                                            <li>\n                                                <div class=\"frame\" id=\"frame-140100572181336\">\n                                                    <h4>File \n                                                        <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                        <em class=\"line\">1821</em>,\n      in\n                                                        <code class=\"function\">handle_user_exception</code>\n                                                    </h4>\n                                                    <div class=\"source library\">\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\">            </span>return self.handle_http_exception(e)\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\"></span>\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\">        </span>handler = self._find_error_handler(e)\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\"></span>\n                                                        </pre>\n                                                        <pre class=\"line before\">\n                                                            <span class=\"ws\">        </span>if handler is None:\n                                                        </pre>\n                                                        <pre class=\"line current\">\n                                                            <span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">        </span>return handler(e)\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\"></span>\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">    </span>def handle_exception(self, e):\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler\n                                                        </pre>\n                                                        <pre class=\"line after\">\n                                                            <span class=\"ws\">        </span>associated with it, or that was raised from an error handler.\n                                                        </pre>\n                                                    </div>\n                                                </div>\n                                                <li>\n                                                    <div class=\"frame\" id=\"frame-140100572181280\">\n                                                        <h4>File \n                                                            <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\"</cite>,\n      line\n                                                            <em class=\"line\">39</em>,\n      in\n                                                            <code class=\"function\">reraise</code>\n                                                        </h4>\n                                                        <div class=\"source library\">\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">    </span>import collections.abc as collections_abc\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\"></span>\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">    </span>def reraise(tp, value, tb=None):\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">        </span>if value.__traceback__ is not tb:\n                                                            </pre>\n                                                            <pre class=\"line before\">\n                                                                <span class=\"ws\">            </span>raise value.with_traceback(tb)\n                                                            </pre>\n                                                            <pre class=\"line current\">\n                                                                <span class=\"ws\">        </span>raise value\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\"></span>\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\">    </span>implements_to_string = _identity\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\"></span>\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\"></span>else:\n                                                            </pre>\n                                                            <pre class=\"line after\">\n                                                                <span class=\"ws\">    </span>iterkeys = lambda d: d.iterkeys()\n                                                            </pre>\n                                                        </div>\n                                                    </div>\n                                                    <li>\n                                                        <div class=\"frame\" id=\"frame-140100572180776\">\n                                                            <h4>File \n                                                                <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                                <em class=\"line\">1950</em>,\n      in\n                                                                <code class=\"function\">full_dispatch_request</code>\n                                                            </h4>\n                                                            <div class=\"source library\">\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">        </span>try:\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">            </span>request_started.send(self)\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">            </span>rv = self.preprocess_request()\n                                                                </pre>\n                                                                <pre class=\"line before\">\n                                                                    <span class=\"ws\">            </span>if rv is None:\n                                                                </pre>\n                                                                <pre class=\"line current\">\n                                                                    <span class=\"ws\">                </span>rv = self.dispatch_request()\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">        </span>except Exception as e:\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">        </span>return self.finalize_request(rv)\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\"></span>\n                                                                </pre>\n                                                                <pre class=\"line after\">\n                                                                    <span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):\n                                                                </pre>\n                                                            </div>\n                                                        </div>\n                                                        <li>\n                                                            <div class=\"frame\" id=\"frame-140100572181448\">\n                                                                <h4>File \n                                                                    <cite class=\"filename\">\"/usr/local/lib/python3.6/dist-packages/flask/app.py\"</cite>,\n      line\n                                                                    <em class=\"line\">1936</em>,\n      in\n                                                                    <code class=\"function\">dispatch_request</code>\n                                                                </h4>\n                                                                <div class=\"source library\">\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">        </span>):\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">            </span>return self.make_default_options_response()\n                                                                    </pre>\n                                                                    <pre class=\"line before\">\n                                                                        <span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint\n                                                                    </pre>\n                                                                    <pre class=\"line current\">\n                                                                        <span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\"></span>\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">    </span>def full_dispatch_request(self):\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and\n                                                                    </pre>\n                                                                    <pre class=\"line after\">\n                                                                        <span class=\"ws\">        </span>error handling.\n                                                                    </pre>\n                                                                </div>\n                                                            </div>\n                                                            <li>\n                                                                <div class=\"frame\" id=\"frame-140100572181504\">\n                                                                    <h4>File \n                                                                        <cite class=\"filename\">\"/root/green2go/Backend/runBackend.py\"</cite>,\n      line\n                                                                        <em class=\"line\">468</em>,\n      in\n                                                                        <code class=\"function\">selectLoction</code>\n                                                                    </h4>\n                                                                    <div class=\"source \">\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>authCheck = handleAuth(locationDic)\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>if authCheck[0] is False:\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">        </span>return json.dumps({&quot;success&quot; : False, &quot;message&quot; : authCheck[1]})\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>locationDic.pop('auth_token', None)\n                                                                        </pre>\n                                                                        <pre class=\"line before\">\n                                                                            <span class=\"ws\">    </span>res = locationDao.selectLocation(locationDic)  #need to get the method for database team\n                                                                        </pre>\n                                                                        <pre class=\"line current\">\n                                                                            <span class=\"ws\">    </span>if res[0] is True:\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\">        </span>return json.dumps({&quot;success&quot; : res[0], &quot;message&quot; : &quot;&quot;})\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\">    </span>else:\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\">        </span>return json.dumps({&quot;success&quot; : res[0], &quot;message&quot; : res[1]})\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\"></span>\n                                                                        </pre>\n                                                                        <pre class=\"line after\">\n                                                                            <span class=\"ws\"></span>if __name__ == '__main__':\n                                                                        </pre>\n                                                                    </div>\n                                                                </div>\n                                                            </ul>\n                                                            <blockquote>TypeError: 'NoneType' object is not subscriptable</blockquote>\n                                                        </div>\n                                                        <div class=\"plain\">\n                                                            <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n                                                                <p>\n                                                                    <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  \n                                                                    <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a \n                                                                        <a href=\"https://gist.github.com/\">gist</a>:\n                                                                        <input type=\"submit\" value=\"create paste\">\n                                                                    </span>\n                                                                </p>\n                                                                <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/_compat.py&quot;, line 39, in reraise\n    raise value\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/_compat.py&quot;, line 39, in reraise\n    raise value\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;/usr/local/lib/python3.6/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;/root/green2go/Backend/runBackend.py&quot;, line 468, in selectLoction\n    if res[0] is True:\nTypeError: 'NoneType' object is not subscriptable</textarea>\n                                                            </form>\n                                                        </div>\n                                                        <div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  \n                                                            <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n                                                        </div>\n                                                        <div class=\"footer\">\n        Brought to you by \n                                                            <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"pin-prompt\">\n                                                        <div class=\"inner\">\n                                                            <h3>Console Locked</h3>\n                                                            <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        \n                                                                <form>\n                                                                    <p>PIN:\n            \n                                                                        <input type=text name=pin size=14>\n                                                                        <input type=submit name=btn value=\"Confirm Pin\">\n        \n                                                                    </form>\n                                                                </div>\n                                                            </div>\n                                                        </body>\n                                                    </html>\n                                                    <!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/root/green2go/Backend/runBackend.py\", line 468, in selectLoction\n    if res[0] is True:\nTypeError: 'NoneType' object is not subscriptable\n\n-->\n"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://198.199.77.174:5000"
		}
	]
}